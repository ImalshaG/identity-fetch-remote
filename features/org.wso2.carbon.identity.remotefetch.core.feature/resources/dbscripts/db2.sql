CREATE TABLE IDN_REMOTE_FETCH_CONFIG(
    ID INTEGER NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    IS_ENABLED CHAR(1) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,
    REPO_MANAGER_TYPE VARCHAR(255) NOT NULL,
    ACTION_LISTENER_TYPE VARCHAR(255) NOT NULL,
    CONFIG_DEPLOYER_TYPE VARCHAR(255) NOT NULL,
    REMOTE_FETCH_NAME VARCHAR(255),
    ATTRIBUTES_JSON CLOB(16352) NOT NULL,
    PRIMARY KEY (ID)
    )
/
CREATE SEQUENCE IDN_REMOTE_FETCH_CONFIG_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
 /
CREATE TRIGGER IDN_REMOTE_FETCH_CONFIG_TRIG NO CASCADE
BEFORE INSERT
ON IDN_REMOTE_FETCH_CONFIG
REFERENCING NEW AS NEW
FOR EACH ROW MODE DB2SQL
  BEGIN ATOMIC
SET (NEW.ID) = (NEXTVAL FOR IDN_REMOTE_FETCH_CONFIG_SEQ);
END
/

CREATE TABLE IDN_REMOTE_FETCH_REVISIONS (
	ID INTEGER NOT NULL,
	CONFIG_ID INT NOT NULL,
	FILE_PATH VARCHAR(255) NOT NULL,
	FILE_HASH VARCHAR(255),
	DEPLOYED_DATE TIMESTAMP,
	DEPLOYMENT_STATUS VARCHAR(255),
	ITEM_NAME VARCHAR(255) NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (CONFIG_ID) REFERENCES IDN_REMOTE_FETCH_CONFIG(ID) ON DELETE CASCADE,
	CONSTRAINT UC_REVISIONS UNIQUE (CONFIG_ID,ITEM_NAME)
)
/
CREATE SEQUENCE IDN_REMOTE_FETCH_REVISIONS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
 /
CREATE TRIGGER IDN_REMOTE_FETCH_REVISIONS_TRIG NO CASCADE
BEFORE INSERT
ON IDN_REMOTE_FETCH_REVISIONS
REFERENCING NEW AS NEW
FOR EACH ROW MODE DB2SQL
  BEGIN ATOMIC
SET (NEW.ID) = (NEXTVAL FOR IDN_REMOTE_FETCH_REVISIONS_SEQ);
END
/