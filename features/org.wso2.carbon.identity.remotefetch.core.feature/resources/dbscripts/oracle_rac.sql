CREATE TABLE IDN_REMOTE_FETCH_CONFIG(
	ID INTEGER NOT NULL,
	TENANT_ID INTEGER NOT NULL,
	IS_ENABLED CHAR(1) NOT NULL,
	USER_NAME  VARCHAR2(255) NOT NULL,
	REPO_MANAGER_TYPE VARCHAR2(255) NOT NULL,
	ACTION_LISTENER_TYPE VARCHAR2(255) NOT NULL,
	CONFIG_DEPLOYER_TYPE VARCHAR2(255) NOT NULL,
	REMOTE_FETCH_NAME VARCHAR(255),
	ATTRIBUTES_JSON CLOB NOT NULL,
	CONSTRAINT PK_IDN_REMOTE_FETCH_CONFIG PRIMARY KEY (ID)
)/
CREATE SEQUENCE IDN_REMOTE_FETCH_CONFIG_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER IDN_REMOTE_FETCH_CONFIG_TRIG
  BEFORE INSERT
  ON IDN_REMOTE_FETCH_CONFIG
  REFERENCING NEW AS NEW
  FOR EACH ROW
  BEGIN
    SELECT IDN_REMOTE_FETCH_CONFIG_SEQ.nextval INTO :NEW.ID FROM dual;
  END;
/

CREATE TABLE IDN_REMOTE_FETCH_REVISIONS(
	ID INTEGER NOT NULL,
	CONFIG_ID INTEGER NOT NULL,
	FILE_PATH VARCHAR2(255) NOT NULL,
	FILE_HASH VARCHAR2(255),
	DEPLOYED_DATE DATE,
	DEPLOYMENT_STATUS VARCHAR2(255),
	ITEM_NAME VARCHAR2(255),
	CONSTRAINT PK_IDN_REMOTE_FETCH_REVISIONS PRIMARY KEY (ID),
	FOREIGN KEY (CONFIG_ID) REFERENCES IDN_REMOTE_FETCH_CONFIG (ID) ON DELETE CASCADE,
	CONSTRAINT UC_REVISIONS UNIQUE (CONFIG_ID, ITEM_NAME)
)/
CREATE SEQUENCE IDN_REMOTE_FETCH_REVISIONS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/

CREATE OR REPLACE TRIGGER IDN_REMOTE_FETCH_REVISIONS_TRIG
  BEFORE INSERT
  ON IDN_REMOTE_FETCH_REVISIONS
  REFERENCING NEW AS NEW
  FOR EACH ROW
  BEGIN
    SELECT IDN_REMOTE_FETCH_REVISIONS_SEQ.nextval INTO :NEW.ID FROM dual;
  END;
/